#include "GameWorld.h"
#include "GlobalProperties.h"
#include "Map.h"
#include "Warrior.h"
#include "Goblin.h"  // Alterado de Wolf para Goblin
#include "Camera.h"
#include <memory>
#include <iostream>
#include <SDL2/SDL_image.h>
#include "C:\Games\Eldryn Legends\math-vector.h"
using Vector = Mylib::Math::Vector<float, 2>;

bool colision(float ax, float ay, float aWidth, float aHeight, float bx, float by, float bWidth, float bHeight){
    if( ay + aHeight < by) return false;
    else if(ay > by + bHeight) return false;
    else if(ax + aWidth < bx) return false;
    else if(ax > bx + bWidth) return false;

    return true; 
}

void GameWorld::map(){
    this->mapTerrain1 = new int*[MAP_HEIGHT];
    this->mapTerrain2 = new int*[MAP_HEIGHT];

    for(int i = 0; i < MAP_HEIGHT; i++){
        this->mapTerrain1[i] = new int[MAP_WIDTH];
        std::fill(this->mapTerrain1[i], this->mapTerrain1[i] + MAP_WIDTH, 6);
    }

    int fullMap[MAP_HEIGHT][MAP_WIDTH] = {
        {6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6},
        {6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,16,17,17,17,17,18,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6},
        {6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,23,24,24,24,24,25,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6},
        {6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,23,24,24,24,24,25,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6},
        {6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,23,24,24,24,24,25,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6},
        {6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,23,24,24,24,24,25,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6},
        {6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,23,24,24,24,24,25,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6},
        {6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,23,24,24,24,24,25,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6},
        {6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,23,24,24,24,24,25,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6},
        {6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,23,24,24,24,24,25,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6},
        {6,6,6,6,6,6,16,17,17,17,17,17,17,18,6,6,6,6,6,6,6,6,6,6,6,6,6,23,24,24,24,24,25,6,6,6,6,6,6,6,6,6,6,6,6,6,16,17,17,17,17,17,17,18,6,6,6,6,6,6},
        {6,6,6,6,6,6,23,24,24,24,24,24,24,25,6,6,6,6,6,46,47,47,47,48,6,6,6,23,24,24,24,24,25,6,6,6,6,46,47,47,47,48,6,6,6,6,23,24,24,24,24,24,24,25,6,6,6,6,6,6},
        {6,6,6,6,6,6,23,24,24,24,24,24,24,25,6,6,6,6,6,53,54,54,54,55,6,6,6,23,24,24,24,24,25,6,6,6,6,53,54,54,54,55,6,6,6,6,23,24,24,24,24,24,24,25,6,6,6,6,6,6},
        {6,6,6,6,6,6,23,24,24,24,24,24,24,25,6,6,6,6,6,53,54,54,54,55,6,6,6,23,24,24,24,24,25,6,6,6,6,53,54,54,54,55,6,6,6,6,23,24,24,24,24,24,24,25,6,6,6,6,6,6},
        {6,6,6,6,6,6,23,24,24,24,24,24,24,25,6,6,6,6,6,53,54,54,54,55,6,6,6,23,24,24,24,24,25,6,6,6,6,53,54,54,54,55,6,6,6,6,23,24,24,24,24,24,24,25,6,6,6,6,6,6},
        {6,6,6,6,6,6,23,24,24,24,24,24,24,25,6,6,6,6,6,53,54,54,54,55,6,6,6,23,24,24,24,24,25,6,6,6,6,53,54,54,54,55,6,6,6,6,23,24,24,24,24,24,24,25,6,6,6,6,6,6},
        {6,6,6,6,6,6,23,24,24,24,24,24,24,25,6,6,6,6,6,53,54,54,54,55,6,6,6,23,24,24,24,24,25,6,6,6,6,53,54,54,54,55,6,6,6,6,23,24,24,24,24,24,24,25,6,6,6,6,6,6},
        {6,6,6,6,6,6,30,31,31,31,31,31,31,32,6,6,6,6,6,60,61,61,61,62,6,6,6,23,24,24,24,24,25,6,6,6,6,60,61,61,61,62,6,6,6,6,30,31,31,31,31,31,31,32,6,6,6,6,6,6},
        {6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,23,24,24,24,24,25,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6},
        {6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,23,24,24,24,24,25,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6},
        {6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,23,24,24,24,24,25,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6},
        {6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,37,6,6,6,6,6,6,6,6,6,6,6,23,24,24,24,24,25,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,37,6,6,6,6,6,6,6,6,6,6,6},
        {6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,23,24,24,24,24,25,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6},
        {6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,23,24,24,24,24,25,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6},
        {6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,23,24,24,24,24,25,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6},
        {6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,23,24,24,24,24,25,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6},
        {6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,23,24,24,24,24,25,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6},
        {6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,23,24,24,24,24,25,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6},
        {6,16,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,10,24,24,24,24,9,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,18,6},
        {6,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,25,6},
        {6,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,25,6},
        {6,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,25,6},
        {6,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,25,6},
        {6,30,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,3,24,24,24,24,2,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,32,6},
        {6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,23,24,24,24,24,25,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6},
        {6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,23,24,24,24,24,25,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6},
        {6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,23,24,24,24,24,25,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6},
        {6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,37,6,6,6,6,6,6,6,6,6,6,6,23,24,24,24,24,25,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6},
        {6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,23,24,24,24,24,25,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,37,6,6,6,6,6},
        {6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,23,24,24,24,24,25,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6},
        {6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,46,47,47,47,48,6,6,6,23,24,24,24,24,25,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6},
        {6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,53,54,54,54,55,6,6,6,23,24,24,24,24,25,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6},
        {6,6,6,6,6,6,16,17,17,17,17,17,17,18,6,6,6,6,6,53,54,54,54,55,6,6,6,23,24,24,24,24,25,6,6,6,6,6,6,6,6,6,6,6,6,6,16,17,17,17,17,17,17,18,6,6,6,6,6,6},
        {6,6,6,6,6,6,23,24,24,24,24,24,24,25,6,6,6,6,6,53,54,54,54,55,6,6,6,23,24,24,24,24,25,6,6,6,6,46,47,47,47,48,6,6,6,6,23,24,24,24,24,24,24,25,6,6,6,6,6,6},
        {6,6,6,6,6,6,23,24,24,24,24,24,24,25,6,6,6,6,6,53,54,54,54,55,6,6,6,23,24,24,24,24,25,6,6,6,6,53,54,54,54,55,6,6,6,6,23,24,24,24,24,24,24,25,6,6,6,6,6,6},
        {6,6,6,6,6,6,23,24,24,24,24,24,24,25,6,6,6,6,6,53,54,54,54,55,6,6,6,23,24,24,24,24,25,6,6,6,6,53,54,54,54,55,6,6,6,6,23,24,24,24,24,24,24,25,6,6,6,6,6,6},
        {6,6,6,6,6,6,23,24,24,24,24,24,24,25,6,6,6,6,6,60,61,61,61,62,6,6,6,23,24,24,24,24,25,6,6,6,6,53,54,41,54,55,6,6,6,6,23,24,24,24,24,24,24,25,6,6,6,6,6,6},
        {6,6,6,6,6,6,23,24,24,24,24,24,24,25,6,6,6,6,6,6,6,6,6,6,6,6,6,23,24,24,24,24,25,6,6,6,6,53,54,54,54,55,6,6,6,6,23,24,24,24,24,24,24,25,6,6,6,6,6,6},
        {6,6,6,6,6,6,23,24,24,24,24,24,24,25,6,6,6,6,6,6,6,6,6,6,6,6,6,23,24,24,24,24,25,6,6,6,6,53,54,54,54,55,6,6,6,6,23,24,24,24,24,24,24,25,6,6,6,6,6,6},
        {6,6,6,6,6,6,30,31,31,31,31,31,31,32,6,6,6,6,6,6,6,6,6,6,6,6,6,23,24,24,24,24,25,6,6,6,6,60,61,61,61,62,6,6,6,6,30,31,31,31,31,31,31,32,6,6,6,6,6,6},
        {6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,23,24,24,24,24,25,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6},
        {6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,23,24,24,24,24,25,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6},
        {6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,23,24,24,24,24,25,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6},
        {6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,23,24,24,24,24,25,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6},
        {6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,23,24,24,24,24,25,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6},
        {6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,23,24,24,24,24,25,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6},
        {6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,23,24,24,24,24,25,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6},
        {6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,23,24,24,24,24,25,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6},
        {6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,30,31,31,31,31,32,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6},
        {6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6}
    };
    // Copia os valores para mapTerrain2
    for(int i = 0; i < MAP_HEIGHT; i++){
        this->mapTerrain2[i] = new int[MAP_WIDTH];
        for(int j = 0; j < MAP_WIDTH; j++){
            this->mapTerrain2[i][j] = fullMap[i][j];
        }
    }
}

GameWorld::GameWorld(SDL_Renderer* renderer, TextureManager& textureManager) : camera() {
    this->map();
    this->player = std::make_unique<Warrior>(BASE_WIDTH / 2, BASE_HEIGHT / 2, 
                        textureManager.get("warrior_run_right"),
                        textureManager.get("warrior_run_up"),
                        textureManager.get("warrior_run_down"),
                        textureManager.get("warrior_idle_right"),
                        textureManager.get("warrior_idle_up"),
                        textureManager.get("warrior_idle_down"),
                        textureManager.get("warrior_hit_right"),
                        textureManager.get("warrior_hit_up"),
                        textureManager.get("warrior_hit_down"));



                                            
    for(int i = 0; i < 3; i++){
        this->enemyGoblins.push_back(std::make_unique<Goblin>(BASE_WIDTH / 2, BASE_HEIGHT / 2,
                        textureManager.get("goblin_run_right"),
                        textureManager.get("goblin_run_up"),
                        textureManager.get("goblin_run_down"),
                        textureManager.get("goblin_idle_right"),
                        textureManager.get("goblin_idle_up"),
                        textureManager.get("goblin_idle_down"),
                        textureManager.get("goblin_hit_right"),
                        textureManager.get("goblin_hit_up"),
                        textureManager.get("goblin_hit_down")));  
    }                           
    
    this->gameTerrain1 = std::make_unique<Map>(renderer, "C:/Users/Usuario/OneDrive/Área de Trabalho/Jogo C++/Eldryn Legends/assets/maps/tilesetts.png", this->mapTerrain1, 16, MAP_WIDTH, MAP_WIDTH);
    this->gameTerrain2 = std::make_unique<Map>(renderer, "C:/Users/Usuario/OneDrive/Área de Trabalho/Jogo C++/Eldryn Legends/assets/maps/tilesetts.png", this->mapTerrain2, 16, MAP_WIDTH, MAP_WIDTH);
}

GameWorld::~GameWorld(){
    for(int p = 0; p < MAP_HEIGHT; p++){
        delete[] this->mapTerrain1[p];
        delete[] this->mapTerrain2[p];
    }
    delete[] this->mapTerrain1;
    delete[] this->mapTerrain2;
}

void GameWorld::render(SDL_Renderer* renderer){
    this->gameTerrain1->render(renderer, this->camera.getView());
    this->gameTerrain2->render(renderer, this->camera.getView());
    
    // Renderiza o goblin apenas se ele existir
    for(auto& goblin : enemyGoblins){
        if (goblin) {
                goblin->render(renderer, this->camera.getView());
            }
    }
    
    
    this->player->render(renderer, this->camera.getView());
}

void GameWorld::update(float dt, const Uint8* keys) {
    this->player->update(dt, keys);
    
    Vector position_player = this->player->getPosition();

    for(auto it = enemyGoblins.begin(); it != enemyGoblins.end(); ){
        if (!enemyGoblins.empty()) {
            std::unique_ptr<Goblin>& goblin = *it;

            if (!goblin->isDead()) {
                Vector position_goblin = goblin->getPosition();
                
                if (player->isAttackingNow()) {
                    Hitbox* activeHitbox = nullptr;

                    if (player->getHitboxTop()->isActive()) activeHitbox = player->getHitboxTop();
                    else if (player->getHitboxBottom()->isActive()) activeHitbox = player->getHitboxBottom();
                    else if (player->getHitboxRight()->isActive()) activeHitbox = player->getHitboxRight();
                    else if (player->getHitboxLeft()->isActive()) activeHitbox = player->getHitboxLeft();

                    if (activeHitbox && !player->hasAlreadyHit()) {
                        if (SDL_HasIntersection(&activeHitbox->getRect(), &goblin->getRect())) {
                            goblin->takeDamage(player->getSwordDamage());
                            player->setAlreadyHit(true);
                        }
                    }

                    goblin->update(dt, nullptr);
                } else {
                    goblin->update(dt, nullptr);
                }

                it++;
            } else {
                // Goblin morreu - adicione efeitos antes de remover se quiser
                it = enemyGoblins.erase(it);
            }
        } else {
            break;
        }
    }
    this->camera.update(
        position_player.x, 
        position_player.y, 
        MAP_WIDTH * 16, 
        MAP_HEIGHT * 16);
}

void GameWorld::handleInput(const SDL_Event& event){
    this->player->handleEvents(event);
}
