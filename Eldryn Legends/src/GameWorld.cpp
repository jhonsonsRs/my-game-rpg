#include "GameWorld.h"
#include "GlobalProperties.h"
#include "Map.h"
#include "Warrior.h"
#include "Goblin.h" 
#include "Camera.h"
#include <memory>
#include <iostream>
#include <SDL2/SDL_image.h>
#include <cmath>
#define _USE_MATH_DEFINES
#include "C:\Games\Eldryn Legends\math-vector.h"
using Vector = Mylib::Math::Vector<float, 2>;

bool colision(float ax, float ay, float aWidth, float aHeight, float bx, float by, float bWidth, float bHeight){
    if( ay + aHeight < by) return false;
    else if(ay > by + bHeight) return false;
    else if(ax + aWidth < bx) return false;
    else if(ax > bx + bWidth) return false;

    return true; 
}

void GameWorld::map(){
    this->mapTerrain1 = new int*[MAP_HEIGHT];
    this->mapTerrain2 = new int*[MAP_HEIGHT];

    for(int i = 0; i < MAP_HEIGHT; i++){
        this->mapTerrain1[i] = new int[MAP_WIDTH];
        std::fill(this->mapTerrain1[i], this->mapTerrain1[i] + MAP_WIDTH, 6);
    }

    int fullMap[MAP_HEIGHT][MAP_WIDTH] = {
        {6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6},
        {6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,16,17,17,17,17,18,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6},
        {6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,23,24,24,24,24,25,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6},
        {6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,23,24,24,24,24,25,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6},
        {6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,23,24,24,24,24,25,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6},
        {6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,23,24,24,24,24,25,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6},
        {6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,23,24,24,24,24,25,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6},
        {6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,23,24,24,24,24,25,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6},
        {6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,23,24,24,24,24,25,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6},
        {6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,23,24,24,24,24,25,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6},
        {6,6,6,6,6,6,16,17,17,17,17,17,17,18,6,6,6,6,6,6,6,6,6,6,6,6,6,23,24,24,24,24,25,6,6,6,6,6,6,6,6,6,6,6,6,6,16,17,17,17,17,17,17,18,6,6,6,6,6,6},
        {6,6,6,6,6,6,23,24,24,24,24,24,24,25,6,6,6,6,6,46,47,47,47,48,6,6,6,23,24,24,24,24,25,6,6,6,6,46,47,47,47,48,6,6,6,6,23,24,24,24,24,24,24,25,6,6,6,6,6,6},
        {6,6,6,6,6,6,23,24,24,24,24,24,24,25,6,6,6,6,6,53,54,54,54,55,6,6,6,23,24,24,24,24,25,6,6,6,6,53,54,54,54,55,6,6,6,6,23,24,24,24,24,24,24,25,6,6,6,6,6,6},
        {6,6,6,6,6,6,23,24,24,24,24,24,24,25,6,6,6,6,6,53,54,54,54,55,6,6,6,23,24,24,24,24,25,6,6,6,6,53,54,54,54,55,6,6,6,6,23,24,24,24,24,24,24,25,6,6,6,6,6,6},
        {6,6,6,6,6,6,23,24,24,24,24,24,24,25,6,6,6,6,6,53,54,54,54,55,6,6,6,23,24,24,24,24,25,6,6,6,6,53,54,54,54,55,6,6,6,6,23,24,24,24,24,24,24,25,6,6,6,6,6,6},
        {6,6,6,6,6,6,23,24,24,24,24,24,24,25,6,6,6,6,6,53,54,54,54,55,6,6,6,23,24,24,24,24,25,6,6,6,6,53,54,54,54,55,6,6,6,6,23,24,24,24,24,24,24,25,6,6,6,6,6,6},
        {6,6,6,6,6,6,23,24,24,24,24,24,24,25,6,6,6,6,6,53,54,54,54,55,6,6,6,23,24,24,24,24,25,6,6,6,6,53,54,54,54,55,6,6,6,6,23,24,24,24,24,24,24,25,6,6,6,6,6,6},
        {6,6,6,6,6,6,30,31,31,31,31,31,31,32,6,6,6,6,6,60,61,61,61,62,6,6,6,23,24,24,24,24,25,6,6,6,6,60,61,61,61,62,6,6,6,6,30,31,31,31,31,31,31,32,6,6,6,6,6,6},
        {6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,23,24,24,24,24,25,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6},
        {6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,23,24,24,24,24,25,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6},
        {6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,23,24,24,24,24,25,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6},
        {6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,37,6,6,6,6,6,6,6,6,6,6,6,23,24,24,24,24,25,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,37,6,6,6,6,6,6,6,6,6,6,6},
        {6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,23,24,24,24,24,25,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6},
        {6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,23,24,24,24,24,25,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6},
        {6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,23,24,24,24,24,25,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6},
        {6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,23,24,24,24,24,25,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6},
        {6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,23,24,24,24,24,25,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6},
        {6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,23,24,24,24,24,25,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6},
        {6,16,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,10,24,24,24,24,9,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,18,6},
        {6,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,25,6},
        {6,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,25,6},
        {6,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,25,6},
        {6,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,25,6},
        {6,30,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,3,24,24,24,24,2,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,32,6},
        {6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,23,24,24,24,24,25,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6},
        {6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,23,24,24,24,24,25,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6},
        {6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,23,24,24,24,24,25,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6},
        {6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,37,6,6,6,6,6,6,6,6,6,6,6,23,24,24,24,24,25,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6},
        {6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,23,24,24,24,24,25,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,37,6,6,6,6,6},
        {6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,23,24,24,24,24,25,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6},
        {6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,46,47,47,47,48,6,6,6,23,24,24,24,24,25,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6},
        {6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,53,54,54,54,55,6,6,6,23,24,24,24,24,25,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6},
        {6,6,6,6,6,6,16,17,17,17,17,17,17,18,6,6,6,6,6,53,54,54,54,55,6,6,6,23,24,24,24,24,25,6,6,6,6,6,6,6,6,6,6,6,6,6,16,17,17,17,17,17,17,18,6,6,6,6,6,6},
        {6,6,6,6,6,6,23,24,24,24,24,24,24,25,6,6,6,6,6,53,54,54,54,55,6,6,6,23,24,24,24,24,25,6,6,6,6,46,47,47,47,48,6,6,6,6,23,24,24,24,24,24,24,25,6,6,6,6,6,6},
        {6,6,6,6,6,6,23,24,24,24,24,24,24,25,6,6,6,6,6,53,54,54,54,55,6,6,6,23,24,24,24,24,25,6,6,6,6,53,54,54,54,55,6,6,6,6,23,24,24,24,24,24,24,25,6,6,6,6,6,6},
        {6,6,6,6,6,6,23,24,24,24,24,24,24,25,6,6,6,6,6,53,54,54,54,55,6,6,6,23,24,24,24,24,25,6,6,6,6,53,54,54,54,55,6,6,6,6,23,24,24,24,24,24,24,25,6,6,6,6,6,6},
        {6,6,6,6,6,6,23,24,24,24,24,24,24,25,6,6,6,6,6,60,61,61,61,62,6,6,6,23,24,24,24,24,25,6,6,6,6,53,54,41,54,55,6,6,6,6,23,24,24,24,24,24,24,25,6,6,6,6,6,6},
        {6,6,6,6,6,6,23,24,24,24,24,24,24,25,6,6,6,6,6,6,6,6,6,6,6,6,6,23,24,24,24,24,25,6,6,6,6,53,54,54,54,55,6,6,6,6,23,24,24,24,24,24,24,25,6,6,6,6,6,6},
        {6,6,6,6,6,6,23,24,24,24,24,24,24,25,6,6,6,6,6,6,6,6,6,6,6,6,6,23,24,24,24,24,25,6,6,6,6,53,54,54,54,55,6,6,6,6,23,24,24,24,24,24,24,25,6,6,6,6,6,6},
        {6,6,6,6,6,6,30,31,31,31,31,31,31,32,6,6,6,6,6,6,6,6,6,6,6,6,6,23,24,24,24,24,25,6,6,6,6,60,61,61,61,62,6,6,6,6,30,31,31,31,31,31,31,32,6,6,6,6,6,6},
        {6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,23,24,24,24,24,25,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6},
        {6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,23,24,24,24,24,25,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6},
        {6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,23,24,24,24,24,25,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6},
        {6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,23,24,24,24,24,25,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6},
        {6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,23,24,24,24,24,25,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6},
        {6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,23,24,24,24,24,25,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6},
        {6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,23,24,24,24,24,25,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6},
        {6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,23,24,24,24,24,25,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6},
        {6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,30,31,31,31,31,32,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6},
        {6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6}
    };
    // Copia os valores para mapTerrain2
    for(int i = 0; i < MAP_HEIGHT; i++){
        this->mapTerrain2[i] = new int[MAP_WIDTH];
        for(int j = 0; j < MAP_WIDTH; j++){
            this->mapTerrain2[i][j] = fullMap[i][j];
        }
    }
}

GameWorld::GameWorld(SDL_Renderer* renderer, TextureManager* textureManager
) : camera(), textureManager(textureManager) {
    this->map();
    this->player = std::make_unique<Warrior>(BASE_WIDTH / 2, BASE_HEIGHT / 2, 
                                                textureManager);

    this->enemyGoblin = std::make_unique<Goblin>(BASE_WIDTH / 2, BASE_HEIGHT / 2,
                                                textureManager);
    
    this->gameTerrain1 = std::make_unique<Map>(renderer, "C:/Games/Eldryn Legends/assets/maps/tilesetts.png", this->mapTerrain1, 16, MAP_WIDTH, MAP_WIDTH);
    this->gameTerrain2 = std::make_unique<Map>(renderer, "C:/Games/Eldryn Legends/assets/maps/tilesetts.png", this->mapTerrain2, 16, MAP_WIDTH, MAP_WIDTH);
}

GameWorld::~GameWorld(){
    for(int p = 0; p < MAP_HEIGHT; p++){
        delete[] this->mapTerrain1[p];
        delete[] this->mapTerrain2[p];
    }
    delete[] this->mapTerrain1;
    delete[] this->mapTerrain2;
}

void GameWorld::render(SDL_Renderer* renderer){
    this->gameTerrain1->render(renderer, this->camera.getView());
    this->gameTerrain2->render(renderer, this->camera.getView());
    
    // Renderiza o goblin apenas se ele existir
    if (this->enemyGoblin) {
        this->enemyGoblin->render(renderer, this->camera.getView());
    }
    
    this->player->render(renderer, this->camera.getView());
}

void GameWorld::update(float dt, const Uint8* keys) {
    this->player->update(dt, keys);
    Vector position_player = this->player->getPosition();

    if (this->enemyGoblin) {
        if (!this->enemyGoblin->isDead()) {
            // Verifica ataque do jogador (mantido igual)
            if (player->isAttackingNow()) {
                Hitbox* activeHitbox = player->getActiveHitbox();
                if (activeHitbox && !player->hasAlreadyHit()) {
                    if (SDL_HasIntersection(&activeHitbox->getRect(), &enemyGoblin->getRect())) {
                        enemyGoblin->takeDamage(player->getSwordDamage());
                        player->setAlreadyHit(true);
                    }
                }
            }

            // Verifica colisão e determina direção do ataque (SIMPLIFICADO)
            if (SDL_HasIntersection(&player->getRect(), &enemyGoblin->getRect())) {
                SDL_Rect pRect = player->getRect();
                SDL_Rect gRect = enemyGoblin->getRect();
                
                // Calcula qual lado está mais próximo (sem ângulos)
                bool fromTop = (pRect.y + pRect.h) < gRect.y + (gRect.h/3);
                bool fromBottom = pRect.y > gRect.y + (2*gRect.h/3);
                bool fromLeft = (pRect.x + pRect.w) < gRect.x + (gRect.w/3);
                bool fromRight = pRect.x > gRect.x + (2*gRect.w/3);

                // Determina direção do ataque
                if (fromTop) enemyGoblin->activateAttack(Goblin::Direction::UP);
                else if (fromBottom) enemyGoblin->activateAttack(Goblin::Direction::DOWN);
                else if (fromLeft) enemyGoblin->activateAttack(Goblin::Direction::LEFT);
                else if (fromRight) enemyGoblin->activateAttack(Goblin::Direction::RIGHT);
                else enemyGoblin->activateAttack(Goblin::Direction::DOWN); // padrão se não for óbvio
            }

            // Verifica dano (mantido igual)
            if (enemyGoblin->isAttacking()) {
                Hitbox* goblinHitbox = enemyGoblin->getAttackHitbox();
                if (goblinHitbox && SDL_HasIntersection(&goblinHitbox->getRect(), &player->getRect())) {
                    player->takeDamage(enemyGoblin->getGoblinDamage());
                }
            }
            
            this->enemyGoblin->update(dt, nullptr);
        } else {
            enemyGoblin.reset();
        }
    }

    this->camera.update(
        position_player.x, 
        position_player.y, 
        MAP_WIDTH * 16, 
        MAP_HEIGHT * 16);
}
void GameWorld::handleInput(const SDL_Event& event){
    this->player->handleEvents(event);
}